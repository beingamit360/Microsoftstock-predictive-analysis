import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Fetch Microsoft stock data
msft = yf.download('MSFT', start='2010-01-01', end=pd.to_datetime('today').strftime('%Y-%m-%d'))

# Feature Engineering
msft['Date'] = msft.index
msft['Date'] = pd.to_datetime(msft['Date'])
msft.set_index('Date', inplace=True)
msft = msft[['Close']]

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))
msft['Close'] = scaler.fit_transform(np.array(msft['Close']).reshape(-1, 1))

# Create sequences for LSTM
def create_sequences(data, seq_length):
    sequences = []
    for i in range(len(data)-seq_length):
        seq = data[i:i+seq_length]
        label = data[i+seq_length:i+seq_length+1]
        sequences.append((seq, label))
    return np.array(sequences)

# Define sequence length
sequence_length = 10

# Create sequences and labels
sequences = create_sequences(msft['Close'].values, sequence_length)

# Split data into train and test sets
X, y = zip(*sequences)
X_train, X_test, y_train, y_test = train_test_split(np.array(X), np.array(y), test_size=0.2, random_state=42)

# Build LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(sequence_length, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Reshape data for LSTM input
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# Train the model
model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test), verbose=1)

# Make predictions
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Invert predictions to original scale
train_predict = scaler.inverse_transform(train_predict)
y_train_original = scaler.inverse_transform(y_train.reshape(-1, 1))
test_predict = scaler.inverse_transform(test_predict)
y_test_original = scaler.inverse_transform(y_test.reshape(-1, 1))

# Evaluate the model
train_rmse = np.sqrt(mean_squared_error(y_train_original, train_predict))
test_rmse = np.sqrt(mean_squared_error(y_test_original, test_predict))
print(f"Train RMSE: {train_rmse}")
print(f"Test RMSE: {test_rmse}")

# Visualize predictions
plt.figure(figsize=(14, 7))
plt.plot(msft.index[-len(y_test_original):], y_test_original, label='Actual Prices', marker='o')
plt.plot(msft.index[-len(y_test_original):], test_predict, label='Predicted Prices', marker='o')
plt.title('Microsoft Stock Price Prediction using LSTM')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
